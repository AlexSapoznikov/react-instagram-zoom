{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["props","children","onReleaseAnimationStart","onReleaseAnimationEnd","onTouchStart","onTouchMove","onTouchEnd","className","releaseAnimationTimeout","maxScale","zIndex","style","Number","elRef","createRef","useState","initialDistance","setInitialDistance","initialAbsolutePositionX","setInitialAbsolutePositionX","initialAbsolutePositionY","setInitialAbsolutePositionY","zoom","setZoom","moveLeft","setMoveLeft","moveTop","setMoveTop","anchorLeftPercentage","setAnchorLeftPercentage","anchorTopPercentage","setAnchorTopPercentage","isMoving","setMoving","releaseAnimationDone","setReleaseAnimationDone","getTouchData","touchEvent","elBox","touch1","touch2","x1","clientX","y1","clientY","x2","y2","distance","Math","relativePosition","absolutePosition","x","y","anchor","left","top","twoFingerTouchStop","event","clearTimeout","releaseTimeout","setTimeout","touchStart","twoFingerTouchStart","touchMove","currentZoom","currentMoveX","currentMoveY","twoFingerTouchMove","touchCancel","touchEnd","useEffect","el","scale","ref","position","transformOrigin","transform","transition","undefined","App","Array","fill","map","_","src","width","maxWidth","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.daf1459b.chunk.js","sourcesContent":["/**\n * Implementation of instagram-like zoom + pan\n */\nimport React, {\n  createRef,\n  CSSProperties,\n  ReactElement,\n  useEffect,\n  useState\n} from 'react';\n\ntype ZoomableType = {\n  children: ReactElement | ReactElement[],\n  className?: string,\n  zIndex?: number,\n  style?: CSSProperties,\n  maxScale?: number, // Same as CSS transform scale\n  releaseAnimationTimeout?: number, // In milliseconds\n  onReleaseAnimationStart?: (event: TouchEvent) => void,\n  onReleaseAnimationEnd?: (event: TouchEvent) => void,\n  onTouchStart?: (event: TouchEvent) => void,\n  onTouchMove?: (event: TouchEvent) => void,\n  onTouchEnd?: (event: TouchEvent) => void,\n};\n\nlet releaseTimeout: any;\n\nconst Zoomable = (props: ZoomableType) => {\n  const {\n    children,\n    onReleaseAnimationStart,\n    onReleaseAnimationEnd,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n    className,\n  } = props;\n  let {\n    releaseAnimationTimeout,\n    maxScale,\n    zIndex,\n    style,\n  } = props;\n\n  // Defaults\n  releaseAnimationTimeout = releaseAnimationTimeout || 500;\n  zIndex = zIndex || Number.MAX_SAFE_INTEGER;\n  maxScale = maxScale || Number.MAX_SAFE_INTEGER;\n  style = style || {};\n\n  // Refs\n  const elRef = createRef<HTMLDivElement>();\n\n  // Distance between fingers\n  const [initialDistance, setInitialDistance] = useState<number>(0);\n\n  // Initial coordinates\n  const [initialAbsolutePositionX, setInitialAbsolutePositionX] = useState<number>(0);\n  const [initialAbsolutePositionY, setInitialAbsolutePositionY] = useState<number>(0);\n\n  // Zoom\n  const [zoom, setZoom] = useState<number>(0);\n\n  // Transform translate\n  const [moveLeft, setMoveLeft] = useState<number>(0);\n  const [moveTop, setMoveTop] = useState<number>(0);\n\n  // Transform origin\n  const [anchorLeftPercentage, setAnchorLeftPercentage] = useState<number>(50);\n  const [anchorTopPercentage, setAnchorTopPercentage] = useState<number>(50);\n\n  // Is moving state\n  const [isMoving, setMoving] = useState<boolean>(false);\n  const [releaseAnimationDone, setReleaseAnimationDone] = useState<boolean>(true);\n\n  // Gets touch related calculated data\n  const getTouchData = (touchEvent: TouchEvent) => {\n    // @ts-ignore\n    const elBox = touchEvent?.target?.getBoundingClientRect();\n\n    const touch1 = touchEvent?.touches?.[0];\n    const touch2 = touchEvent?.touches?.[1];\n    const { clientX: x1, clientY: y1 } = touch1 || {};\n    const { clientX: x2, clientY: y2 } = touch2 || {};\n\n    const distance = Math.round(\n      Math.sqrt(\n        ((x2 - x1) ** 2) + ((y2 - y1) ** 2)\n      )\n    );\n    const relativePosition = {\n      x: Math.round(((x1 - elBox.left) + (x2 - elBox.left)) / 2),\n      y: Math.round(((y1 - elBox.top) + (y2 - elBox.top)) / 2),\n    };\n    const absolutePosition = {\n      x: Math.round((x1 + x2) / 2),\n      y: Math.round((y1 + y2) / 2),\n    };\n    const anchor = {\n      left: Math.round((relativePosition.x / elBox.width) * 100),\n      top: Math.round((relativePosition.y / elBox.height) * 100)\n    };\n\n    return {\n      distance,\n      absolutePosition,\n      anchor,\n    };\n  };\n\n  // Touch start handler\n  const twoFingerTouchStart = (touchEvent: TouchEvent) => {\n    touchEvent.preventDefault();\n    const { distance, absolutePosition, anchor } = getTouchData(touchEvent);\n\n    // Set initial distance\n    setInitialDistance(distance);\n\n    // Set initial absolute position xy\n    setInitialAbsolutePositionX(absolutePosition?.x || 0);\n    setInitialAbsolutePositionY(absolutePosition?.y || 0);\n\n    // Set anchor\n    setAnchorTopPercentage(anchor.top);\n    setAnchorLeftPercentage(anchor.left);\n  };\n\n  // Touch move handler\n  const twoFingerTouchMove = (touchEvent: TouchEvent) => {\n    touchEvent.preventDefault();\n    const { distance, absolutePosition } = getTouchData(touchEvent);\n\n    // Calculate zoom\n    const currentZoom = Math.max(0, distance - initialDistance);\n    setZoom(currentZoom);\n\n    // Calculate move x\n    const currentMoveX = absolutePosition.x - initialAbsolutePositionX;\n    setMoveLeft(currentMoveX);\n\n    // Calculate move y\n    const currentMoveY = absolutePosition.y - initialAbsolutePositionY;\n    setMoveTop(currentMoveY);\n\n    // Update initial, if zoom 0 (e.g. zooming out more than possible)\n    if (currentZoom <= 0) {\n      setInitialDistance(distance);\n    }\n  };\n\n  // Touch stop handler - reset everything\n  const twoFingerTouchStop = (event: TouchEvent) => {\n    setMoving(false);\n    setInitialDistance(0);\n    setInitialAbsolutePositionX(0);\n    setInitialAbsolutePositionY(0);\n    setZoom(0);\n    setMoveLeft(0);\n    setMoveTop(0);\n    setAnchorLeftPercentage(50);\n    setAnchorTopPercentage(50);\n\n    // Touch end callback\n    if (typeof onTouchEnd === 'function') {\n      onTouchEnd(event);\n    }\n\n    // Release animation start callback\n    if (typeof onReleaseAnimationStart === 'function') {\n      onReleaseAnimationStart(event);\n    }\n\n    // Release\n    clearTimeout(releaseTimeout);\n    releaseTimeout = setTimeout(() => {\n      setReleaseAnimationDone(true);\n\n      // Release animation end callback\n      if (typeof onReleaseAnimationEnd === 'function') {\n        onReleaseAnimationEnd(event);\n      }\n    }, releaseAnimationTimeout);\n  };\n\n  const touchStart = (touchEvent: TouchEvent) => {\n    if (touchEvent?.touches?.length === 2) {\n      setMoving(true);\n      setReleaseAnimationDone(false);\n      twoFingerTouchStart(touchEvent);\n\n      // On touch start callback\n      if (typeof onTouchStart === 'function') {\n        onTouchStart(touchEvent);\n      }\n    }\n  };\n\n  const touchMove = (touchEvent: TouchEvent) => {\n    if (touchEvent?.touches?.length === 2) {\n      twoFingerTouchMove(touchEvent);\n\n      // On touch move callback\n      if (typeof onTouchMove === 'function') {\n        onTouchMove(touchEvent);\n      }\n    }\n  };\n\n  const touchCancel = (event: TouchEvent) => {\n    twoFingerTouchStop(event);\n  };\n\n  const touchEnd = (event: TouchEvent) => {\n    twoFingerTouchStop(event);\n  };\n\n  useEffect(() => {\n    const el = elRef?.current;\n\n    /* eslint-disable no-unused-expressions */\n    el?.addEventListener('touchstart', touchStart);\n    el?.addEventListener('touchmove', touchMove);\n    el?.addEventListener('touchcancel', touchCancel);\n    el?.addEventListener('touchend', touchEnd);\n    el?.addEventListener('mouseup', touchEnd);\n\n    return () => {\n      el?.removeEventListener('touchstart', touchStart);\n      el?.removeEventListener('touchmove', touchMove);\n      el?.removeEventListener('touchcancel', touchCancel);\n      el?.removeEventListener('touchend', touchEnd);\n      el?.removeEventListener('mouseup', touchEnd);\n    };\n    /* eslint-enable no-unused-expressions */\n  }, [elRef]);\n\n  const scale = Math.min(maxScale, 1 + (zoom / 100));\n\n  return (\n    <div ref={elRef}\n         style={{\n           position: (isMoving || !releaseAnimationDone) ? 'relative' : undefined, // Needed for z-index to work\n           zIndex: (isMoving || !releaseAnimationDone) ? zIndex : undefined,\n           transformOrigin: `${anchorLeftPercentage}% ${anchorTopPercentage}%`,\n           transform: `translate(${moveLeft}px, ${moveTop}px) scale(${scale})`,\n           transition: !isMoving\n             ? `\n             ${releaseAnimationTimeout}ms transform,\n             ${releaseAnimationTimeout}ms transform-origin,\n             ${releaseAnimationTimeout}ms z-index,\n             ${releaseAnimationTimeout}ms position\n             `\n             : undefined,\n           ...style\n         }}\n         className={className}\n    >\n      { children }\n    </div>\n  );\n};\n\nexport default Zoomable;\n","import React from 'react'\nimport Zoomable from 'react-instagram-zoom'\n\nconst App = () => {\n  return (\n    <div>\n      {\n        Array(5).fill(null).map(_ => (\n          <div>Other content</div>\n        ))\n      }\n\n      <Zoomable>\n        <img src=\"/cat.png\" width=\"80%\" style={{ maxWidth: '400px' }}/>\n      </Zoomable>\n\n      {\n        Array(10).fill(null).map(_ => (\n          <div>Other content</div>\n        ))\n      }\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}